1/19
sample(c(-1,1),400,replace=TRUE, prob=20/36,18/36)
sample(c(-1,1),400,replace=TRUE, prob=c(20/36,18/36))
mu <- -1/19
replicate(10000,{c <- sample(c(-1,1),400,replace=TRUE, prob=c(20/36,18/36))
mu_hat <- mean(c)
error <- mu_hat - mu})
mu <- -1/19
mu_hat <-replicate(10000,{c <- sample(c(-1,1),400,replace=TRUE, prob=c(20/36,18/36))
mu_hat <- mean(c)
error <- mu_hat - mu
})
mean(mu_hat)
sd(mu_hat)
sqrt(mean(mu_hat^2))
error <-replicate(10000,{c <- sample(c(-1,1),400,replace=TRUE, prob=c(20/36,18/36))
mu_hat <- mean(c)
error <- mu_hat - mu
})
mean(error)
sd(error)
sqrt(mean(error^2)) #SD
hist(error)
qqplot(error)
qqplot(error, normal)
qqnorm(error)
z <- error/(sd(error)/sqrt(400))
qqnorm(z)
abline(0,1)
z <- error/(sd(error)/sqrt(400))
qqnorm(z)
abline(0,1)
0-(-1/19)
dnorm(1/19)
?dnorm
dnorm(1/19, mean=-1/19, sd=0.04996672, lower.tail=FALSE)
dnorm(1/19, mean=-1/19, sd=0.04996672)
dnorm(1/19)
1 - pnorm(sqrt(44)*(-1/19)/sd(error))
1 - pnorm(-sqrt(44)*(-1/19)/sd(error))
data(father.son,package="UsingR")
y <- father.son$sheight
mean(y)
sd(y)
sqrt((mean(y)-y)^2)
n <- 100:1000
?sample
sample(y, n, replace=TRUE)
mean(sample(y, n, replace=TRUE))
sd <- sd(e)/n
e <- mean(sample(y, n, replace=TRUE))
sd <- sd(e)/n
se <- sd(e)/n
sd(e)/n
mu <- mean(y)
sigma <- sqrt(mean(y-mu)^2))
sigma <- sqrt(mean(y-mu)^2)
e <- mean(sample(y, n, replace=TRUE))
sd(e)/sqrt(n)
n <- 25
e <- mean(sample(y, n, replace=TRUE))
sd(e)/sqrt(n)
sigma/sqrt(n)
n <- 25
mu
sigma/sqrt(n)
mu <- mean(y)
sigma <- sqrt(mean(y-mu)^2)
sigma/sqrt(n)
1/(sigma/sqrt(n)
1/(sigma/sqrt(n))
1/(sigma/sqrt(n))
-qnorm(1/(sigma/sqrt(n)))
1-qnorm(1/(sigma/sqrt(n)))
qnorm(1/(sigma/sqrt(n)))
qnorm(1/(sigma/sqrt(n)), lower.tail=FALSE)
?pnorm
set.seed(2016)
prob_heads <- sample(c(0.5, 0.6, 0.4),1)
sample(prob_heads, 100, replace=T))
mean(sample(prob_heads, 100, replace=T))
mean(sample(c(0,1), 100, replace=T, prob=c(prob_heads,1-prob_heads))
mean(sample(c(0,1), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
```
mean(sample(c(0,1), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
set.seed(2016)
prob_heads <- sample(c(0.5, 0.6, 0.4),1)
```
1. Now the probability is set. The coin is either fair or not, but we don't know which. Use a Monte Carlo simulation to toss your coin 100 times. Report the proportion of heads. http://goo.gl/forms/AakupfnzOq
```{r}
mean(sample(c(0,1), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
set.seed(2016)
prob_heads <- sample(c(0.5, 0.6, 0.4),1)
mean(sample(c(0,1), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
p_hat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= p & ci[2] >= p
ci[1] <= prob_heads & ci[2] >= prob_heads
replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads})
replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads})
mean(replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {phat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {p_hat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {p_hat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
mean(replicate(10000, {p_hat <- mean(sample(c(1,0), 100, replace=T, prob=c(prob_heads,1-prob_heads)))
ci <- p_hat + c(-1,1)*qnorm(0.975)*sqrt(p_hat*(1-p_hat))/sqrt(100)
ci[1] <= prob_heads & ci[2] >= prob_heads}))
library(readr)
filename <- "https://raw.githubusercontent.com/datasciencelabs/data/master/blue-bead-comp-results.csv"
tab <- read_csv(filename)
names(tab)<-c("timestamp", "name", "estimate","N","ci")
```
library(readr)
filename <- "https://raw.githubusercontent.com/datasciencelabs/data/master/blue-bead-comp-results.csv"
tab <- read_csv(filename)
names(tab)<-c("timestamp", "name", "estimate","N","ci")
date <- sapply(strsplit(tab$timestamp," "), function(x)x[1])
date <- as.Date(date,"%m/%d/%Y")
tab %>% mutate(date = date) %>% filter(date<"2016-02-23") %>%
mutate(diff = abs(estimate - 53.4)) %>% arrange(diff)
library(ggplot2)
library(dplyr)
library(tidyr)
library(pollstR)
date <- sapply(strsplit(tab$timestamp," "), function(x)x[1])
date <- as.Date(date,"%m/%d/%Y")
tab %>% mutate(date = date) %>% filter(date<"2016-02-23") %>%
mutate(diff = abs(estimate - 53.4)) %>% arrange(diff)
tab %>% mutate(blue = estimate/100 * N, red = (1-estimate/100) * N) %>% select(blue, red)
tab <- mutate(tab,estimate=ifelse(estimate<1, estimate*100, estimate))
boxplot(tab$estimate)
tab = filter(tab, estimate>20)
tab %>% summarise(sum(N))
slice(tab,1)
N <- sum(tab$N)
p_hat <- sum(tab$estimate*tab$N)/N
View(tab)
c(-1,1)*qnorm(0.975)*sqrt(p_hat/100*(1-p_hat/100))/sqrt(N)*100
theme_set(theme_bw())
race2012 <- pollstr_polls(topic = '2012-president', after= as.Date("2012-11-3"), max_pages = Inf)
polls <- race2012$questions %>%
filter(topic=="2012-president" & state=="US") %>%
select(choice, value, margin_of_error, observations, id) %>%
filter(choice %in% c("Obama","Romney") & !is.na(margin_of_error)) %>%
spread(choice, value) %>%
left_join(select(race2012$polls, id, pollster, method), by="id") %>%
filter(method!="Internet") %>%
mutate(diff= Obama - Romney) %>%
select(pollster, diff, Obama, Romney, margin_of_error, observations)
arrange(polls,diff) %>% rename( n=observations) %>%
mutate(pollster=ifelse(pollster=="PPP (D-Americans United for Change)","PPP",pollster))
# Chunk 1
theta <- -1/19
Y <- sample(c(-1,1), 10000, replace=T, prob=c(10/19, 9/19))
error <- Y - theta
# Chunk 2
install.packages('lubridate')
data("father.son", package="UsingR")
y <- father.son$sheight
# Chunk 3
set.seed(1)
Y <- sample(y, 25, replace = TRUE)
N <- length(Y)
theta <- mean(y)
error1 <- Y[1] - theta #This is the first residual
error <- Y - theta
hist(error)
mean(error)
sd(error)
sd <- sqrt(mean((error)^2))
se <- error/sd
qqnorm(error/sd)
abline(0,1)
# Chunk 4
library(readr)
library(dplyr)
filename <- "https://raw.githubusercontent.com/datasciencelabs/data/master/blue-bead-comp-results.csv"
tab <- read_csv(filename)
names(tab)<-c("timestamp", "name", "estimate","poll_sample_size","ci")
tab <- mutate(tab,estimate=ifelse(estimate<1, estimate*100, estimate)) %>%
filter(estimate>20)
# Chunk 5
filter( tab, abs(poll_sample_size-100)<51) %>% nrow #Between 50 and 150.
# Chunk 6
tab <- filter(tab, abs(poll_sample_size-100)<51)
# Chunk 1
theta <- -1/19
Y <- sample(c(-1,1), 10000, replace=T, prob=c(10/19, 9/19))
error <- Y - theta
# Chunk 2
install.packages('lubridate')
data("father.son", package="UsingR")
y <- father.son$sheight
# Chunk 3
set.seed(1)
Y <- sample(y, 25, replace = TRUE)
N <- length(Y)
theta <- mean(y)
error1 <- Y[1] - theta #This is the first residual
error <- Y - theta
hist(error)
mean(error)
sd(error)
sd <- sqrt(mean((error)^2))
se <- error/sd
qqnorm(error/sd)
abline(0,1)
# Chunk 4
library(readr)
library(dplyr)
filename <- "https://raw.githubusercontent.com/datasciencelabs/data/master/blue-bead-comp-results.csv"
tab <- read_csv(filename)
names(tab)<-c("timestamp", "name", "estimate","poll_sample_size","ci")
tab <- mutate(tab,estimate=ifelse(estimate<1, estimate*100, estimate)) %>%
filter(estimate>20)
# Chunk 5
filter( tab, abs(poll_sample_size-100)<51) %>% nrow #Between 50 and 150.
# Chunk 6
tab <- filter(tab, abs(poll_sample_size-100)<51)
# Chunk 7
theta <- mean(tab$estimate)
error1 <- tab$estimate - theta
mean(error1)
sigma <- sqrt((mean(error1)^2))
# Chunk 8
theta <- mean(y)
sd(Y) ##compared to
sqrt(theta*(1-theta))/sqrt(100) ##or to
theta_hat <- mean(Y)
sqrt(theta_hat*(1-theta_hat))/sqrt(100) ##or to
# Chunk 9
theta_hat <- mean(Y)
s <- sd(Y)
## confidence interval:
theta_hat + c(-1,1)*qnorm(0.975)*s/sqrt(length(Y))
# Chunk 10
## or using the t-distribution
theta_hat + c(-1,1)*qt(0.975, df=length(Y)-1)*s/sqrt(length(Y))
# Chunk 11
library(XML)
theurl <- paste0("http://www.pollster.com/08USPresGEMvO-2.html")
html_tables <- readHTMLTable(theurl,stringsAsFactors=FALSE)
# Chunk 12
tab <- html_tables[[1]]
# Chunk 13
head(tab$Dates)
# Chunk 14
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
# Chunk 15
##use separate to split start and end dates
### we convert it to a dplyr table:
tab <- tbl_df(tab)
tab <- tab %>% separate(col=Dates, into=c("start_date","end_date"), sep="-",
fill="right") #Fill states that if there is no separator it should compute as NA.
select(tab, start_date, end_date)
## if no end_data it means only one day was provided so use that as end as well
tab <- tab %>% mutate(end_date = ifelse(is.na(end_date), start_date, end_date))
select(tab, start_date, end_date)
## now use separate again to get month, day and year for start_date
tab <- tab %>% separate(start_date, c("smonth", "sday", "syear"), sep = "/",
convert = TRUE, fill = "right")
select(tab, smonth:syear, end_date)
### if end data has only 1 / then it is missing month, add it
tab <- tab %>% mutate(end_date = ifelse(str_count(end_date, "/") == 1,
paste(smonth, end_date, sep = "/"), end_date))
select(tab, smonth:syear, end_date)
## now use lubridate function mdy to conver to date
tab <- tab %>% mutate(end_date = mdy(end_date))
select(tab, smonth:syear, end_date)
## add 2000 to year since it is currently 7 or 8
tab <- tab %>% mutate(syear = ifelse(is.na(syear), year(end_date), syear + 2000))
select(tab, smonth:syear, end_date)
## now use unite to create a m/d/y string
tab <- tab %>% unite(start_date, smonth, sday, syear)
select(tab, start_date, end_date)
## covert it to date class
tab <- tab %>% mutate(start_date = mdy(start_date))
select(tab, start_date, end_date)
# Chunk 16
head(tab$`N/Pop`)
# Chunk 17
tab <- separate(tab, `N/Pop`, into=c("N","population_type"), sep="\ ", convert=TRUE, fill="left") #Here the left side (left column) gets filled when NA
# Chunk 18
tab <- mutate(tab, Obama = as.numeric(Obama)/100,
McCain=as.numeric(McCain)/100,
diff = Obama - McCain,
day=as.numeric(start_date - mdy("11/04/2008")),
week = as.numeric(floor(day/7)))
# Chunk 19
filter(tab, N==800) %>% nrow
Y <- filter(tab, N==800)$diff
theta <- 7.2/100
error <- Y -theta
hist(error)
se <- 2*sqrt(theta*(1-theta)/800)
error <- tab$diff - 7.2/100
hist(error)
group_by(tab, week)
summarize(avg=mean(diff))
summarize(tab, avg=mean(diff))
group_by(tab, week) %>% summarize(avg=mean(diff))
library(ggplot2)
group_by(tab, week) %>% summarize(avg=mean(diff)) %>%
ggplot(aes(week, avg)) + geom_line() +
geom_hline(aes(yintercept=0))
group_by(tab, week) %>% summarize(num_polls=n()) %>%
ggplot(aes(week, num_polls)) + geom_point()
group_by(tab, week) %>% mutate(num_polls=n()) %>% select(Pollster, num_polls) %>% ungroup
group_by(tab, week) %>% mutate(num_polls=n()) %>% select(Pollster, num_polls) %>% filter(num_polls>=10) %>% ungroup %>% nrow
group_by(tab, week) %>% mutate(num_polls=n()) %>%
filter(num_polls>=5) %>%
summarize(avg=mean(diff)) %>%
ggplot(aes(week, avg)) + geom_line() +
geom_hline(aes(yintercept=0))
length(tab)
group_by(tab, week) %>% mutate(num_polls=n()) %>%
filter(num_polls>=5) %>%
summarize(avg=mean(diff)) %>%
ggplot(aes(week, avg)) + geom_line() +
geom_hline(aes(yintercept=0))
group_by(tab, week) %>% mutate(num_polls=n()) %>%
filter(num_polls>=5) %>%
summarize(avg=mean(diff) , sd=sd(diff)) %>%
ggplot(aes(week, avg, ymin=avg-2*sd, ymax=avg+2*sd)) +
geom_point() + geom_errorbar() +
geom_hline(aes(yintercept=0))+
geom_hline(aes(yintercept=0.072))
filter(tab, start_date>"2008-01-01") %>% ggplot(aes(start_date, diff)) + geom_point() + geom_smooth(span=0.25) + geom_hline(aes(yintercept=0)) +
geom_hline(aes(yintercept=0.072))
tab %>% filter( N>2000 & week > -4) %>% summarize(sd(diff))
2* sqrt(0.5*0.5) / sqrt(2000)
tab %>% filter( N>2000 & week > -4) %>% summarize(sd(diff))
tab %>% filter(week > -4) %>% group_by(Pollster) %>% filter(n()>4) %>%
ggplot(aes(Pollster, diff , col=Pollster)) + geom_boxplot()
tab2 <- filter(tab, start_date > "2008-01-01") %>% group_by(Pollster) %>% filter(n() > 10)
fit <- lm(diff ~ week + Pollster, data=tab2)
summary( aov(fit) )
Bayes' Rule
x <- sample(c(0,1), 1, repalce=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x=1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)))
))
)
)))))
}}
quit
test
)
;
;:::
''
x <- sample(c(0,1), 1, repalce=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x=1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)))
x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)))
test <- ifelse(x=1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))
x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x=1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))
x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))
test
x
x<1
x <-1
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))
test
replicate(100000, {x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))})
mean(replicate(100000, {x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))}))
replicate(100000, {x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))
sum(test)})
mean(replicate(100000, {x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))
sum(test)}))
replicate(100000, {x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))
sum(test)})
sum(replicate(100000, {x <- sample(c(0,1), 1, replace=T, prob=c(1-1/4000, 1/4000))
test <- ifelse(x==1, sample(c(0,1), 1, replace=T, prob=c(0.01, 0.99)), sample(c(1,0), 1, replace=T, prob=c(0.01, 0.99)))
sum(test)}))
1035/100000
